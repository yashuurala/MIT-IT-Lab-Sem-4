1. Subtract 2 32 bit number

	AREA    RESET, DATA, READONLY
    EXPORT  __Vectors

__Vectors 
	DCD  0x100000FF     ; stack pointer value when stack is empty
    DCD  Reset_Handler  ; reset vector
  
    ALIGN

	AREA mycode, CODE, READONLY
	EXPORT Reset_Handler
	ENTRY
Reset_Handler
	LDR R0,=N1
	LDR R1,[R0]
	LDR R0,=N2
	LDR R2,[R0]
	SUBS R6,R1,R2
	LDR R0,=RES
	STR R6,[R0]
STOP
	B STOP
N1 DCD 0X8
N2 DCD 0X4
	AREA mydata, DATA, READWRITE
RES DCD 0
	END

2.Multiplication using repeatitive addition

	AREA    RESET, DATA, READONLY
    EXPORT  __Vectors

__Vectors 
	DCD  0x100000FF     ; stack pointer value when stack is empty
    DCD  Reset_Handler  ; reset vector
  
    ALIGN

	AREA mycode, CODE, READONLY
	EXPORT Reset_Handler
	ENTRY
	
Reset_Handler
	LDR R0,=N1
	LDR R1,[R0]
	LDR R0, =N2
	LDR R2,[R0]
LOOP
	ADDS R3,R1
	ADCS R4,#0
	SUBS R2,#1
	BNE LOOP
	LDR R0,=RES
	STR R3,[R0],#4
	STR R4,[R0]
STOP
	B STOP
N1 DCD 0X2
N2 DCD 0X2
	AREA mydata, DATA, READWRITE
RES DCD 0
	END

3. BCD multiplication

4.covert 2-digit hexadecimal number in ASCII unpacked form into its equivalent packed hexadecimal number 

	AREA    RESET, DATA, READONLY
    EXPORT  __Vectors

__Vectors 
	DCD  0x100000FF     ; stack pointer value when stack is empty
	DCD  Reset_Handler  ; reset vector
  
    	ALIGN

	AREA mycode, CODE, READONLY
	EXPORT Reset_Handler
	ENTRY
Reset_Handler
	LDR R0,=N1
	LDR R1,[R0]
	
	AND R2,R1,#0XFF
	CMP R2,#0X3A
	BLO DOWN1
	SUB R2,#7
DOWN1
	SUB R2,#0X30
	
	LSR R1,#8
	AND R3,R1,#0XFF
	CMP R3,#0X3A
	BLO DOWN2
	SUB R3,#7
DOWN2
	SUB R3,#0X30
	LSL R3,#4
	
	ADD R2,R2,R3
	LDR R0,=RES
	STRB R2,[R0]
	
STOP
	B STOP
N1 DCD 0X00003942
	AREA mydata, DATA, READWRITE
RES DCD 0
	END

5.convert a 32 bit number in the unpacked form into packed form. 

    AREA    RESET, DATA, READONLY
    EXPORT  __Vectors

__Vectors 
	DCD  0x100000FF     ; stack pointer value when stack is empty
	DCD  Reset_Handler  ; reset vector
  
    	ALIGN

	AREA mycode, CODE, READONLY
	EXPORT Reset_Handler
	ENTRY
Reset_Handler
	LDR R0,=NUM
	LDR R1,[R0],#4
	MOV R5,#04
	
LOOP
	AND R2,R1,#0X0F
	ADD R3,R2
	ROR R3,#4
	LSR R1,#08
	SUBS R5,#1
	BNE LOOP
	
	MOV R5,#04
	LDR R1,[R0]
	
LOOP2
	AND R2,R1,#0X0F
	ADD R3,R2
	ROR R3,#4
	LSR R1,#08
	SUBS R5,#1
	BNE LOOP2
	
	LDR R0,=RES
	STR R3,[R0]
	
STOP
	B STOP

NUM DCD 0X0A010208, 0X090B0C06
	AREA mydata, DATA, READWRITE
RES DCD 0
	END

6.ten 32 bit numbers are stored in registers R0-R10. Sort these numbers in the fully ascending stack using selection sort and store the sorted array back into the registers.

	AREA RESET,DATA,READONLY
	EXPORT __Vectors

__Vectors
	
	DCD 0x10001000
	DCD Reset_Handler
		ALIGN
		AREA mycode,CODE,READONLY
		ENTRY
		EXPORT Reset_Handler	

Reset_Handler
		
		MOV R1, #1
		MOV R2, #6
		MOV R3, #4
		MOV R4, #7
		MOV R5, #9
		MOV R6, #3
		MOV R7, #2
		MOV R8, #5
		MOV R9, #8
		MOV R10, #10
		STM R13!, {R1-R10}
		MOV R0, R13 ;R0 STORES THE STACK TOP
		MOV R2, #10 ;R2 STORES NUMBER OF ELEMENTS IN STACK
		MOV R8,#0	;R8 IS COUNTER FOR OUTER LOOP
OL		CMP R8,R2
		BEQ EXIT
		
		MOV R1, R0	
		MOV R3, R0
		SUB R3, #4
		ADD R9,R8,#1
IL		CMP R9,R2
		BEQ EXIN
		ADD R9,#1
		LDMDB R1,{R4}
		LDMDB R3!,{R5}
		CMP R5,R4
		BLT IL
		STMDB R1,{R5}
		STM R3,{R4}
		B IL
EXIN	SUB R0,#4
		ADD R8,#1
		B OL
		
EXIT	
		LDMDB R13!,{R1-R10}
STOP 	B STOP

		AREA mydata,DATA,READWRITE

		END



OR



	AREA RESET,DATA,READONLY
	EXPORT __Vectors

__Vectors
	
	DCD 0x10001000
	DCD Reset_Handler
		ALIGN
		AREA mycode,CODE,READONLY
		ENTRY
		EXPORT Reset_Handler	

Reset_Handler
		
		MOV R1, #1
		MOV R2, #6
		MOV R3, #4
		MOV R4, #7
		MOV R5, #9
		MOV R6, #3
		MOV R7, #2
		MOV R8, #5
		MOV R9, #8
		MOV R10, #10
		LDR R13,=0X10001000
		STM R13!, {R1-R10}
		LDR R0,=0X10001000
	MOV R8,#10
UP1 MOV R7,R8
	MOV R1,R0
UP2 LDR R2,[R0]
	LDR R3,[R1,#4]!
	CMP R2,R3
	BLS SKIP
	STR R2,[R1]
	STR R3,[R0]
SKIP SUB R7,#1
	TEQ R7,#0
	BNE UP2
	ADD R0,#4
	SUB R8,#1
	TEQ R8,#0
	BNE UP1
		LDMDB R13!,{R1-R10}
STOP 	B STOP

		AREA mydata,DATA,READWRITE

		END


7.Repeat the above question for fully descending stack 

	AREA RESET,DATA,READONLY
	EXPORT __Vectors

__Vectors
	
	DCD 0x10001000
	DCD Reset_Handler
	ALIGN
	AREA mycode,CODE,READONLY
	ENTRY
	EXPORT Reset_Handler	

Reset_Handler
		
	MOV R1, #1
	MOV R2, #6
	MOV R3, #4
	MOV R4, #7
	MOV R5, #9
	MOV R6, #3
	MOV R7, #2
	MOV R8, #5
	MOV R9, #8
	MOV R10, #10
	STMDB R13!, {R1-R10}
	MOV R0,R13
	MOV R8,#9
	
LOOP
	LDM R0,{R1}
	ADD R0,#4
	MOV R7,R8
	MOV R2,R0

LOOP2
	LDM R2!,{R3}
	CMP R1,R3
	BLO SKIP
	STMDB R0,{R3}
	STMDB R2,{R1}
	MOV R1,R3
SKIP
	SUBS R7,#1
	BNE LOOP2
	SUBS R8,#1
	BNE LOOP
	LDM R13, {R1-R10}
		
	NOP
	END

OR


AREA RESET,DATA,READONLY
	EXPORT __Vectors

__Vectors
	
	DCD 0x10001000
	DCD Reset_Handler
		ALIGN
		AREA mycode,CODE,READONLY
		ENTRY
		EXPORT Reset_Handler	

Reset_Handler
		
		MOV R1, #1
		MOV R2, #6
		MOV R3, #4
		MOV R4, #7
		MOV R5, #9
		MOV R6, #3
		MOV R7, #2
		MOV R8, #5
		MOV R9, #8
		MOV R10, #10
		LDR R13,=0X10001000
		STM R13!, {R1-R10}
		LDR R0,=0X10001000
	MOV R8,#10
UP1 MOV R7,R8
	MOV R1,R0
UP2 LDR R2,[R0]
	LDR R3,[R1,#4]!
	CMP R2,R3
	BHS SKIP
	STR R2,[R1]
	STR R3,[R0]
SKIP SUB R7,#1
	TEQ R7,#0
	BNE UP2
	ADD R0,#4
	SUB R8,#1
	TEQ R8,#0
	BNE UP1
		LDMDB R13!,{R1-R10}
STOP 	B STOP

		AREA mydata,DATA,READWRITE

		END

AMSTRONG
\
	AREA    RESET, DATA, READONLY
    EXPORT  __Vectors

__Vectors 
	DCD  0x100000FF     ; stack pointer value when stack is empty
	DCD  Reset_Handler  ; reset vector
  
    	ALIGN

	AREA mycode, CODE, READONLY
	EXPORT Reset_Handler
	ENTRY
Reset_Handler
	LDR R0,=NUM
	LDR R9,=RES
	LDR R1,[R0]
	MOV R2,R1
	AND R3,R1,#0XF
	AND R4,R1,#0XF0
	AND R5,R1,#0XF00
	LSR R4,#4
	LSR R5,#8
	MUL R6,R3,R3
	MUL R6,R6,R3
	MUL R7,R4,R4
	MUL R7,R7,R4
	MUL R8,R5,R5
	MUL R8,R8,R5
	ADCS R6,R7
	ADCS R6,R8
	MOV R8,#10
	MOV R7,#100
	MLA R2,R4,R8,R3
	MLA R2,R5,R7,R2
	CMP R6,R2
	BEQ SET
	BNE NOTSET
SET MOV R2,#1
	STR R2,[R9]
NOTSET MOV R2,#0
	STR R2,[R9]
NUM DCD 0X153
	AREA mydata, DATA,READWRITE
RES DCD 0
	END
